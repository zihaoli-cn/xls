diff --git ortools/base/logging.cc ortools/base/logging.cc
index 3a5cdb6924..22721b0914 100644
--- ortools/base/logging.cc
+++ ortools/base/logging.cc
@@ -51,8 +51,8 @@
 #include "ortools/base/logging_utilities.h"
 #include "ortools/base/raw_logging.h"
 
-ABSL_DECLARE_FLAG(bool, log_prefix);
-ABSL_DECLARE_FLAG(bool, logtostderr);
+ABSL_DECLARE_FLAG(bool, ortools_log_prefix);
+ABSL_DECLARE_FLAG(bool, ortools_logtostderr);
 
 namespace {
 std::once_flag init_done;
@@ -60,8 +60,8 @@ std::once_flag init_done;
 
 void FixFlagsAndEnvironmentForSwig() {
   std::call_once(init_done, [] { google::InitGoogleLogging("swig_helper"); });
-  absl::SetFlag(&FLAGS_logtostderr, true);
-  absl::SetFlag(&FLAGS_log_prefix, false);
+  absl::SetFlag(&FLAGS_ortools_logtostderr, true);
+  absl::SetFlag(&FLAGS_ortools_log_prefix, false);
 }
 
 using std::dec;
@@ -102,14 +102,14 @@ inline struct tm* localtime_r(const time_t* timep, struct tm* result) {
 }
 #endif
 
-ABSL_FLAG(bool, logtostderr, false,
+ABSL_FLAG(bool, ortools_logtostderr, false,
           "log messages go to stderr instead of logfiles");
-ABSL_FLAG(bool, alsologtostderr, false,
+ABSL_FLAG(bool, ortools_alsologtostderr, false,
           "log messages go to stderr in addition to logfiles");
-ABSL_FLAG(bool, colorlogtostderr, false,
+ABSL_FLAG(bool, ortools_colorlogtostderr, false,
           "color messages logged to stderr (if supported by terminal)");
 #if defined(__linux__)
-ABSL_FLAG(bool, drop_log_memory, true,
+ABSL_FLAG(bool, ortools_drop_log_memory, true,
           "Drop in-memory buffers of log contents. "
           "Logs can grow very quickly and they are rarely read before they "
           "need to be evicted from memory. Instead, drop them from memory "
@@ -121,20 +121,20 @@ ABSL_FLAG(bool, drop_log_memory, true,
 //
 // The default is ERROR instead of FATAL so that users can see problems
 // when they run a program without having to look in another file.
-ABSL_FLAG(int, stderrthreshold, google::GLOG_ERROR,
+ABSL_FLAG(int, ortools_stderrthreshold, google::GLOG_ERROR,
           "log messages at or above this level are copied to stderr in "
           "addition to logfiles.  This flag obsoletes --alsologtostderr.");
 
-ABSL_FLAG(bool, log_prefix, true,
+ABSL_FLAG(bool, ortools_log_prefix, true,
           "Prepend the log prefix to the start of each log line");
-ABSL_FLAG(int, minloglevel, 0,
+ABSL_FLAG(int, ortools_minloglevel, 0,
           "Messages logged at a lower level than this don't "
           "actually get logged anywhere");
-ABSL_FLAG(int, logbuflevel, 0,
+ABSL_FLAG(int, ortools_logbuflevel, 0,
           "Buffer log messages logged at this level or lower"
           " (-1 means don't buffer; 0 means buffer INFO only;"
           " ...)");
-ABSL_FLAG(int, logbufsecs, 30,
+ABSL_FLAG(int, ortools_logbufsecs, 30,
           "Buffer log messages for at most this many seconds");
 
 // Compute the default value for --log_dir
@@ -151,23 +151,23 @@ static const char* DefaultLogDir() {
   return "";
 }
 
-ABSL_FLAG(int, logfile_mode, 0664, "Log file mode/permissions.");
+ABSL_FLAG(int, ortools_logfile_mode, 0664, "Log file mode/permissions.");
 
-ABSL_FLAG(std::string, log_dir, DefaultLogDir(),
+ABSL_FLAG(std::string, ortools_log_dir, DefaultLogDir(),
           "If specified, logfiles are written into this directory instead "
           "of the default logging directory.");
-ABSL_FLAG(std::string, log_link, "",
+ABSL_FLAG(std::string, ortools_log_link, "",
           "Put additional links to the log "
           "files in this directory");
 
-ABSL_FLAG(int, max_log_size, 1800,
+ABSL_FLAG(int, ortools_max_log_size, 1800,
           "approx. maximum log file size (in MB). A value of 0 will "
           "be silently overridden to 1.");
 
-ABSL_FLAG(bool, stop_logging_if_full_disk, false,
+ABSL_FLAG(bool, ortools_stop_logging_if_full_disk, false,
           "Stop attempting to log to disk if the disk is full.");
 
-ABSL_FLAG(std::string, log_backtrace_at, "",
+ABSL_FLAG(std::string, ortools_log_backtrace_at, "",
           "Emit a backtrace when logging at file:linenum.");
 
 #if defined(_MSC_VER)
@@ -303,8 +303,8 @@ static const char* GetAnsiColorCode(GLogColor color) {
 
 // Safely get max_log_size, overriding to 1 if it somehow gets defined as 0
 static int32_t MaxLogSize() {
-  return (absl::GetFlag(FLAGS_max_log_size) > 0
-              ? absl::GetFlag(FLAGS_max_log_size)
+  return (absl::GetFlag(FLAGS_ortools_max_log_size) > 0
+              ? absl::GetFlag(FLAGS_ortools_max_log_size)
               : 1);
 }
 
@@ -607,7 +607,7 @@ inline void LogDestination::SetStderrLogging(LogSeverity min_severity) {
   // Prevent any subtle race conditions by wrapping a absl::Mutex lock around
   // all this stuff.
   absl::MutexLock l(&log_mutex);
-  absl::SetFlag(&FLAGS_stderrthreshold, min_severity);
+  absl::SetFlag(&FLAGS_ortools_stderrthreshold, min_severity);
 }
 
 inline void LogDestination::LogToStderr() {
@@ -622,7 +622,7 @@ inline void LogDestination::LogToStderr() {
 static void ColoredWriteToStderr(LogSeverity severity, const char* message,
                                  size_t len) {
   const GLogColor color = (LogDestination::terminal_supports_color() &&
-                           absl::GetFlag(FLAGS_colorlogtostderr))
+                           absl::GetFlag(FLAGS_ortools_colorlogtostderr))
                               ? SeverityToColor(severity)
                               : COLOR_DEFAULT;
 
@@ -665,8 +665,8 @@ static void WriteToStderr(const char* message, size_t len) {
 
 inline void LogDestination::MaybeLogToStderr(LogSeverity severity,
                                              const char* message, size_t len) {
-  if ((severity >= absl::GetFlag(FLAGS_stderrthreshold)) ||
-      absl::GetFlag(FLAGS_alsologtostderr)) {
+  if ((severity >= absl::GetFlag(FLAGS_ortools_stderrthreshold)) ||
+      absl::GetFlag(FLAGS_ortools_alsologtostderr)) {
     ColoredWriteToStderr(severity, message, len);
 #ifdef _MSC_VER
     // On Windows, also output to the debugger
@@ -678,7 +678,7 @@ inline void LogDestination::MaybeLogToStderr(LogSeverity severity,
 inline void LogDestination::MaybeLogToLogfile(LogSeverity severity,
                                               time_t timestamp,
                                               const char* message, size_t len) {
-  const bool should_flush = severity > absl::GetFlag(FLAGS_logbuflevel);
+  const bool should_flush = severity > absl::GetFlag(FLAGS_ortools_logbuflevel);
   LogDestination* destination = log_destination(severity);
   destination->logger_->Write(should_flush, timestamp, message, len);
 }
@@ -686,7 +686,7 @@ inline void LogDestination::MaybeLogToLogfile(LogSeverity severity,
 inline void LogDestination::LogToAllLogfiles(LogSeverity severity,
                                              time_t timestamp,
                                              const char* message, size_t len) {
-  if (absl::GetFlag(FLAGS_logtostderr)) {  // global flag: never log to file
+  if (absl::GetFlag(FLAGS_ortools_logtostderr)) {  // global flag: never log to file
     ColoredWriteToStderr(severity, message, len);
   } else {
     for (int i = severity; i >= 0; --i)
@@ -813,7 +813,7 @@ void LogFileObject::FlushUnlocked() {
     bytes_since_flush_ = 0;
   }
   // Figure out when we are due for another flush.
-  const int64_t next = (absl::GetFlag(FLAGS_logbufsecs) *
+  const int64_t next = (absl::GetFlag(FLAGS_ortools_logbufsecs) *
                         static_cast<int64_t>(1000000));  // in usec
   next_flush_time_ =
       logging_internal::CycleClock_Now() + logging_internal::UsecToCycles(next);
@@ -824,7 +824,7 @@ bool LogFileObject::CreateLogfile(const string& time_pid_string) {
       base_filename_ + filename_extension_ + time_pid_string;
   const char* filename = string_filename.c_str();
   int fd = open(filename, O_WRONLY | O_CREAT | O_EXCL,
-                absl::GetFlag(FLAGS_logfile_mode));
+                absl::GetFlag(FLAGS_ortools_logfile_mode));
   if (fd == -1) return false;
 #if !defined(_MSC_VER)
   // Mark the file close-on-exec. We don't really care if this fails
@@ -864,9 +864,9 @@ bool LogFileObject::CreateLogfile(const string& time_pid_string) {
     }
 
     // Make an additional link to the log file in a place specified by
-    // absl::GetFlag(FLAGS_log_link), if indicated
-    if (!absl::GetFlag(FLAGS_log_link).empty()) {
-      linkpath = absl::GetFlag(FLAGS_log_link) + "/" + linkname;
+    // absl::GetFlag(FLAGS_ortools_log_link), if indicated
+    if (!absl::GetFlag(FLAGS_ortools_log_link).empty()) {
+      linkpath = absl::GetFlag(FLAGS_ortools_log_link) + "/" + linkname;
       unlink(linkpath.c_str());  // delete old one if it exists
       if (symlink(filename, linkpath.c_str()) != 0) {
         // silently ignore failures
@@ -999,7 +999,7 @@ void LogFileObject::Write(bool force_flush, time_t timestamp,
     // greater than 4096, thereby indicating an error.
     errno = 0;
     fwrite(message, 1, message_len, file_);
-    if (absl::GetFlag(FLAGS_stop_logging_if_full_disk) &&
+    if (absl::GetFlag(FLAGS_ortools_stop_logging_if_full_disk) &&
         errno == ENOSPC) {  // disk full, stop writing to disk
       stop_writing = true;  // until the disk is
       return;
@@ -1014,13 +1014,13 @@ void LogFileObject::Write(bool force_flush, time_t timestamp,
   }
 
   // See important msgs *now*.  Also, flush logs at least every 10^6 chars,
-  // or every "absl::GetFlag(FLAGS_logbufsecs)" seconds.
+  // or every "absl::GetFlag(FLAGS_ortools_logbufsecs)" seconds.
   if (force_flush || (bytes_since_flush_ >= 1000000) ||
       (logging_internal::CycleClock_Now() >= next_flush_time_)) {
     FlushUnlocked();
 #if defined(__linux__)
     // Only consider files >= 3MiB
-    if (absl::GetFlag(FLAGS_drop_log_memory) && file_length_ >= (3 << 20)) {
+    if (absl::GetFlag(FLAGS_ortools_drop_log_memory) && file_length_ >= (3 << 20)) {
       // Don't evict the most recent 1-2MiB so as not to impact a tailer
       // of the log file and to avoid page rounding issue on linux < 4.7
       uint32_t total_drop_length =
@@ -1155,7 +1155,7 @@ void LogMessage::Init(const char* file, int line, LogSeverity severity,
   //    I1018 160715 f5d4fbb0 logging.cc:1153]
   //    (log level, GMT month, date, time, thread_id, file basename, line)
   // We exclude the thread_id for the default thread.
-  if (absl::GetFlag(FLAGS_log_prefix) && (line != kNoLogPrefix)) {
+  if (absl::GetFlag(FLAGS_ortools_log_prefix) && (line != kNoLogPrefix)) {
     stream() << LogSeverityNames[severity][0] << setw(2)
              << 1 + data_->tm_time_.tm_mon << setw(2) << data_->tm_time_.tm_mday
              << ' ' << setw(2) << data_->tm_time_.tm_hour << ':' << setw(2)
@@ -1167,10 +1167,10 @@ void LogMessage::Init(const char* file, int line, LogSeverity severity,
   }
   data_->num_prefix_chars_ = data_->stream_.pcount();
 
-  if (!absl::GetFlag(FLAGS_log_backtrace_at).empty()) {
+  if (!absl::GetFlag(FLAGS_ortools_log_backtrace_at).empty()) {
     char fileline[128];
     snprintf(fileline, sizeof(fileline), "%s:%d", data_->basename_, line);
-    if (!strcmp(absl::GetFlag(FLAGS_log_backtrace_at).c_str(), fileline)) {
+    if (!strcmp(absl::GetFlag(FLAGS_ortools_log_backtrace_at).c_str(), fileline)) {
       string stacktrace;
       logging_internal::DumpStackTraceToString(&stacktrace);
       stream() << " (stacktrace:\n" << stacktrace << ") ";
@@ -1200,7 +1200,7 @@ ostream& LogMessage::stream() { return data_->stream_; }
 // that needs to synchronize the log.
 void LogMessage::Flush() {
   if (data_->has_been_flushed_ ||
-      data_->severity_ < absl::GetFlag(FLAGS_minloglevel))
+      data_->severity_ < absl::GetFlag(FLAGS_ortools_minloglevel))
     return;
 
   data_->num_chars_to_log_ = data_->stream_.pcount();
@@ -1260,7 +1260,7 @@ static char fatal_message[256];
 void ReprintFatalMessage() {
   if (fatal_message[0]) {
     const int n = strlen(fatal_message);
-    if (!absl::GetFlag(FLAGS_logtostderr)) {
+    if (!absl::GetFlag(FLAGS_ortools_logtostderr)) {
       // Also write to stderr (don't color to avoid terminal checks)
       WriteToStderr(fatal_message, n);
     }
@@ -1292,7 +1292,7 @@ void LogMessage::SendToLog() EXCLUSIVE_LOCKS_REQUIRED(log_mutex) {
   // global flag: never log to file if set.  Also -- don't log to a
   // file if we haven't parsed the command line flags to get the
   // program name.
-  if (absl::GetFlag(FLAGS_logtostderr) ||
+  if (absl::GetFlag(FLAGS_ortools_logtostderr) ||
       !logging_internal::IsGoogleLoggingInitialized()) {
     ColoredWriteToStderr(data_->severity_, data_->message_text_,
                          data_->num_chars_to_log_);
@@ -1335,7 +1335,7 @@ void LogMessage::SendToLog() EXCLUSIVE_LOCKS_REQUIRED(log_mutex) {
       fatal_time = data_->timestamp_;
     }
 
-    if (!absl::GetFlag(FLAGS_logtostderr)) {
+    if (!absl::GetFlag(FLAGS_ortools_logtostderr)) {
       for (int i = 0; i < NUM_SEVERITIES; ++i) {
         if (LogDestination::log_destinations_[i])
           LogDestination::log_destinations_[i]->logger_->Write(true, 0, "", 0);
@@ -1685,9 +1685,9 @@ const vector<string>& GetLoggingDirectories() {
   if (logging_directories_list == nullptr) {
     logging_directories_list = new vector<string>;
 
-    if (!absl::GetFlag(FLAGS_log_dir).empty()) {
+    if (!absl::GetFlag(FLAGS_ortools_log_dir).empty()) {
       // A dir was specified, we should use it
-      logging_directories_list->push_back(absl::GetFlag(FLAGS_log_dir).c_str());
+      logging_directories_list->push_back(absl::GetFlag(FLAGS_ortools_log_dir).c_str());
     } else {
       GetTempDirectories(logging_directories_list);
 #ifdef _MSC_VER
diff --git ortools/base/logging.h ortools/base/logging.h
index da7b3caaf3..0c9853f54d 100644
--- ortools/base/logging.h
+++ ortools/base/logging.h
@@ -249,50 +249,50 @@ void FixFlagsAndEnvironmentForSwig();
 // timestamps from different machines.
 
 // Set whether log messages go to stderr instead of logfiles
-ABSL_DECLARE_FLAG(bool, logtostderr);
+ABSL_DECLARE_FLAG(bool, ortools_logtostderr);
 
 // Set whether log messages go to stderr in addition to logfiles.
-ABSL_DECLARE_FLAG(bool, alsologtostderr);
+ABSL_DECLARE_FLAG(bool, ortools_alsologtostderr);
 
 // Set color messages logged to stderr (if supported by terminal).
-ABSL_DECLARE_FLAG(bool, colorlogtostderr);
+ABSL_DECLARE_FLAG(bool, ortools_colorlogtostderr);
 
 // Log messages at a level >= this flag are automatically sent to
 // stderr in addition to log files.
-ABSL_DECLARE_FLAG(int, stderrthreshold);
+ABSL_DECLARE_FLAG(int, ortools_stderrthreshold);
 
 // Set whether the log prefix should be prepended to each line of output.
-ABSL_DECLARE_FLAG(bool, log_prefix);
+ABSL_DECLARE_FLAG(bool, ortools_log_prefix);
 
 // Log messages at a level <= this flag are buffered.
 // Log messages at a higher level are flushed immediately.
-ABSL_DECLARE_FLAG(int, logbuflevel);
+ABSL_DECLARE_FLAG(int, ortools_logbuflevel);
 
 // Sets the maximum number of seconds which logs may be buffered for.
-ABSL_DECLARE_FLAG(int, logbufsecs);
+ABSL_DECLARE_FLAG(int, ortools_logbufsecs);
 
 // Log suppression level: messages logged at a lower level than this
 // are suppressed.
-ABSL_DECLARE_FLAG(int, minloglevel);
+ABSL_DECLARE_FLAG(int, ortools_minloglevel);
 
 // If specified, logfiles are written into this directory instead of the
 // default logging directory.
-ABSL_DECLARE_FLAG(std::string, log_dir);
+ABSL_DECLARE_FLAG(std::string, ortools_log_dir);
 
 // Set the log file mode.
-ABSL_DECLARE_FLAG(int, logfile_mode);
+ABSL_DECLARE_FLAG(int, ortools_logfile_mode);
 
 // Sets the path of the directory into which to put additional links
 // to the log files.
-ABSL_DECLARE_FLAG(std::string, log_link);
+ABSL_DECLARE_FLAG(std::string, ortools_log_link);
 
-ABSL_DECLARE_FLAG(int, v);  // in vlog_is_on.cc
+ABSL_DECLARE_FLAG(int, ortools_v);  // in vlog_is_on.cc
 
 // Sets the maximum log file size (in MB).
-ABSL_DECLARE_FLAG(int, max_log_size);
+ABSL_DECLARE_FLAG(int, ortools_max_log_size);
 
 // Sets whether to avoid logging to the disk if the disk is full.
-ABSL_DECLARE_FLAG(bool, stop_logging_if_full_disk);
+ABSL_DECLARE_FLAG(bool, ortools_stop_logging_if_full_disk);
 
 // Log messages below the GOOGLE_STRIP_LOG level will be compiled away for
 // security reasons. See LOG(severtiy) below.
diff --git ortools/base/logging_utilities.cc ortools/base/logging_utilities.cc
index f5c4e68f07..8dbfb1ad38 100644
--- ortools/base/logging_utilities.cc
+++ ortools/base/logging_utilities.cc
@@ -144,7 +144,7 @@ static pthread_t g_main_thread_id;
 #include "absl/time/time.h"
 #include "ortools/base/commandlineflags.h"
 
-ABSL_FLAG(bool, symbolize_stacktrace, true,
+ABSL_FLAG(bool, ortools_symbolize_stacktrace, true,
           "Symbolize the stack trace in the tombstone");
 
 namespace google {
@@ -196,7 +196,7 @@ static void DumpStackTrace(int skip_count, DebugWriter* writerfn, void* arg) {
   void* stack[32];
   int depth = absl::GetStackTrace(stack, ABSL_ARRAYSIZE(stack), skip_count + 1);
   for (int i = 0; i < depth; i++) {
-    if (absl::GetFlag(FLAGS_symbolize_stacktrace)) {
+    if (absl::GetFlag(FLAGS_ortools_symbolize_stacktrace)) {
       DumpPCAndSymbol(writerfn, arg, stack[i], "    ");
     } else {
       DumpPC(writerfn, arg, stack[i], "    ");
diff --git ortools/base/raw_logging.cc ortools/base/raw_logging.cc
index 14ffd17f99..d0ddb65544 100644
--- ortools/base/raw_logging.cc
+++ ortools/base/raw_logging.cc
@@ -76,9 +76,9 @@ static char crash_buf[kLogBufSize + 1] = {0};  // Will end in '\0'
 
 void RawLog__(LogSeverity severity, const char* file, int line,
               const char* format, ...) {
-  if (!(absl::GetFlag(FLAGS_logtostderr) ||
-        severity >= absl::GetFlag(FLAGS_stderrthreshold) ||
-        absl::GetFlag(FLAGS_alsologtostderr) ||
+  if (!(absl::GetFlag(FLAGS_ortools_logtostderr) ||
+        severity >= absl::GetFlag(FLAGS_ortools_stderrthreshold) ||
+        absl::GetFlag(FLAGS_ortools_alsologtostderr) ||
         !logging_internal::IsGoogleLoggingInitialized())) {
     return;  // this stderr log message is suppressed
   }
diff --git ortools/base/vlog_is_on.cc ortools/base/vlog_is_on.cc
index a9b8fbf045..aa1d0c8114 100644
--- ortools/base/vlog_is_on.cc
+++ ortools/base/vlog_is_on.cc
@@ -27,16 +27,16 @@
 #include "ortools/base/logging_utilities.h"
 #include "ortools/base/raw_logging.h"
 
-ABSL_FLAG(int, v, 0,
+ABSL_FLAG(int, ortools_v, 0,
           "Show all VLOG(m) messages for m <= this."
-          " Overridable by --vmodule.");
+          " Overridable by --ortools_vmodule.");
 
-ABSL_FLAG(std::string, vmodule, "",
+ABSL_FLAG(std::string, ortools_vmodule, "",
           "per-module verbose level."
           " Argument is a comma-separated list of <module name>=<log level>."
           " <module name> is a glob pattern, matched against the filename base"
           " (that is, name ignoring .cc/.h./-inl.h)."
-          " <log level> overrides any value given by --v.");
+          " <log level> overrides any value given by --ortools_v.");
 
 namespace google {
 
@@ -84,7 +84,7 @@ using logging_internal::SafeFNMatch_;
 
 int32_t kLogSiteUninitialized = 1000;
 
-// List of per-module log levels from absl::GetFlag(FLAGS_vmodule).
+// List of per-module log levels from absl::GetFlag(FLAGS_ortools_vmodule).
 // Once created each element is never deleted/modified
 // except for the vlog_level: other threads will read VModuleInfo blobs
 // w/o locks and we'll store pointers to vlog_level at VLOG locations
@@ -113,7 +113,7 @@ static void VLOG2Initializer() {
   // Can now parse --vmodule flag and initialize mapping of module-specific
   // logging levels.
   inited_vmodule = false;
-  const std::string vmodule_flag = absl::GetFlag(FLAGS_vmodule);
+  const std::string vmodule_flag = absl::GetFlag(FLAGS_ortools_vmodule);
   const char* vmodule = vmodule_flag.c_str();
   const char* sep;
   VModuleInfo* head = nullptr;
@@ -145,7 +145,7 @@ static void VLOG2Initializer() {
 
 // This can be called very early, so we use SpinLock and RAW_VLOG here.
 int SetVLOGLevel(const char* module_pattern, int log_level) {
-  int result = absl::GetFlag(FLAGS_v);
+  int result = absl::GetFlag(FLAGS_ortools_v);
   int const pattern_len = strlen(module_pattern);
   bool found = false;
   {
@@ -224,7 +224,7 @@ bool InitVLOG3__(int32_t** vmodule_info, bool* initialized, const char* fname,
   // restore the errno in case something recoverable went wrong during
   // the initialization of the VLOG mechanism (see above note "protect the..")
   errno = old_errno;
-  return *vmodule_info == nullptr ? absl::GetFlag(FLAGS_v) >= verbose_level
+  return *vmodule_info == nullptr ? absl::GetFlag(FLAGS_ortools_v) >= verbose_level
                                   : **vmodule_info >= verbose_level;
 }
 
diff --git ortools/base/vlog_is_on.h ortools/base/vlog_is_on.h
index cb3c296602..981c6cb6e7 100644
--- ortools/base/vlog_is_on.h
+++ ortools/base/vlog_is_on.h
@@ -23,7 +23,7 @@ namespace google {
 // We emit an anonymous static int* variable at every VLOG_IS_ON(n) site.
 // (Normally) the first time every VLOG_IS_ON(n) site is hit,
 // we determine what variable will dynamically control logging at this site:
-// it's either absl::GetFlag(FLAGS_v) or an appropriate internal variable
+// it's either absl::GetFlag(FLAGS_ortools_v) or an appropriate internal variable
 // matching the current source file that represents results of
 // parsing of --vmodule flag and/or SetVLOGLevel calls.
 #define VLOG_IS_ON(verboselevel)                                        \
@@ -33,15 +33,15 @@ namespace google {
     int32_t verbose_level__ = (verboselevel);                           \
     (vmodule_initialized__                                              \
          ? (vmodule_info__ == nullptr                                   \
-                ? absl::GetFlag(FLAGS_v) >= verbose_level__             \
+                ? absl::GetFlag(FLAGS_ortools_v) >= verbose_level__             \
                 : *vmodule_info__ >= verbose_level__)                   \
          : google::InitVLOG3__(&vmodule_info__, &vmodule_initialized__, \
                                __FILE__, verbose_level__));             \
   })
 #else
 // GNU extensions not available, so we do not support --vmodule.
-// Dynamic value of absl::GetFlag(FLAGS_v) always controls the logging level.
-#define VLOG_IS_ON(verboselevel) (absl::GetFlag(FLAGS_v) >= (verboselevel))
+// Dynamic value of absl::GetFlag(FLAGS_ortools_v) always controls the logging level.
+#define VLOG_IS_ON(verboselevel) (absl::GetFlag(FLAGS_ortools_v) >= (verboselevel))
 #endif
 
 // Set VLOG(_IS_ON) level for module_pattern to log_level.
@@ -51,7 +51,7 @@ namespace google {
 //    that have already executed after/during InitGoogleLogging,
 //.   one needs to supply the exact --vmodule pattern that applied to them.
 //       (If no --vmodule pattern applied to them
-//       the value of FLAGS_v will continue to control them.)
+//       the value of FLAGS_ortools_v will continue to control them.)
 extern GOOGLE_GLOG_DLL_DECL int SetVLOGLevel(const char* module_pattern,
                                              int log_level);
 
diff --git ortools/linear_solver/BUILD.bazel ortools/linear_solver/BUILD.bazel
index 9c9a1d0a6c..a5cecf9d97 100644
--- ortools/linear_solver/BUILD.bazel
+++ ortools/linear_solver/BUILD.bazel
@@ -58,10 +58,7 @@ cc_library(
         "linear_expr.cc",
         "linear_solver_callback.cc",
         "linear_solver.cc",
-        "lpi_glop.cpp",
         "model_validator.cc",
-        "pdlp_interface.cc",
-        "pdlp_proto_solver.cc",
         "sat_interface.cc",
         "sat_proto_solver.cc",
         "sat_solver_utils.cc",
@@ -100,12 +97,9 @@ cc_library(
         "scip_proto_solver.h",
     ],
     copts = [
-        "-DUSE_PDLP",
-        "-DUSE_SCIP",
     ],
     deps = [
         ":linear_solver_cc_proto",
-        ":scip_with_glop",
         ":model_exporter",
         "@com_google_absl//absl/status",
         "@com_google_absl//absl/status:statusor",
@@ -124,11 +118,7 @@ cc_library(
         "//ortools/bop:integral_solver",
         "//ortools/glop:lp_solver",
         "//ortools/glop:parameters_cc_proto",
-        "//ortools/gscip:legacy_scip_params",
         "//ortools/gurobi:environment",
-        "//ortools/pdlp:primal_dual_hybrid_gradient",
-        "//ortools/pdlp:solve_log_cc_proto",
-        "//ortools/pdlp:solvers_cc_proto",
         "//ortools/port:file",
         "//ortools/port:proto_utils",
         "//ortools/sat:cp_model_cc_proto",
@@ -142,21 +132,6 @@ cc_library(
     }),
 )
 
-copy_file(
-    name = "lpi_glop",
-    src = "@scip//:src/lpi/lpi_glop.cpp",
-    out = "lpi_glop.cpp",
-)
-
-cc_library(
-    name = "scip_with_glop",
-    srcs = ["lpi_glop.cpp"],
-    deps = [
-        "//ortools/glop:lp_solver",
-        "@scip//:libscip",
-    ],
-)
-
 cc_library(
     name = "scip_helper_macros",
     hdrs = ["scip_helper_macros.h"],
diff --git ortools/linear_solver/linear_solver.cc ortools/linear_solver/linear_solver.cc
index c85114e4ec..d288593f2e 100644
--- ortools/linear_solver/linear_solver.cc
+++ ortools/linear_solver/linear_solver.cc
@@ -369,7 +369,9 @@ extern MPSolverInterface* BuildGLPKInterface(bool mip, MPSolver* const solver);
 #endif
 extern MPSolverInterface* BuildBopInterface(MPSolver* const solver);
 extern MPSolverInterface* BuildGLOPInterface(MPSolver* const solver);
+#if defined(USE_PDLP)
 extern MPSolverInterface* BuildPdlpInterface(MPSolver* const solver);
+#endif
 extern MPSolverInterface* BuildSatInterface(MPSolver* const solver);
 #if defined(USE_SCIP)
 extern MPSolverInterface* BuildSCIPInterface(MPSolver* const solver);
@@ -392,8 +394,10 @@ MPSolverInterface* BuildSolverInterface(MPSolver* const solver) {
       return BuildBopInterface(solver);
     case MPSolver::GLOP_LINEAR_PROGRAMMING:
       return BuildGLOPInterface(solver);
+#if defined(USE_PDLP)
     case MPSolver::PDLP_LINEAR_PROGRAMMING:
       return BuildPdlpInterface(solver);
+#endif
     case MPSolver::SAT_INTEGER_PROGRAMMING:
       return BuildSatInterface(solver);
 #if defined(USE_GLPK)
